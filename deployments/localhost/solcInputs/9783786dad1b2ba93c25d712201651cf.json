{
	"language": "Solidity",
	"sources": {
		"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
			"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
		},
		"contracts/FundMe.sol": {
			"content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n//import \"../node_modules/hardhat/console.sol\";\n\nerror FundMe__NotOwner();\nerror FundMe__LessThanMinUSD();\nerror FundMe__WithdrawFailed();\n\n/** @title A contract for crowd funding\n *  @author PCWCFA\n *  @notice This contract is to demo a sample funding contract\n *  @dev This implements price feeds as our library\n */\ncontract FundMe {\n\t// Type declarations\n\tusing PriceConverter for uint256;\n\n\t// State variables\n\tuint256 public constant MIN_USD = 1 * 1e15;\n\taddress[] private s_funders;\n\tmapping(address => uint256) private s_addressToAmountFunded;\n\taddress private immutable i_owner;\n\tAggregatorV3Interface private s_priceFeed;\n\n\t// Modifiers\n\tmodifier onlyOwner() {\n\t\t//require (msg.sender == i_owner, \"Only the owner can withdraw.\");\n\t\tif (msg.sender != i_owner) {\n\t\t\trevert FundMe__NotOwner();\n\t\t}\n\t\t_; // The rest of the code. Ex: the Send function.\n\t}\n\n\tconstructor(address priceFeedAddress) {\n\t\ti_owner = msg.sender; // This is so the deployer of the contract is the owner.\n\t\ts_priceFeed = AggregatorV3Interface(priceFeedAddress);\n\t}\n\n\treceive() external payable {\n\t\tfund();\n\t}\n\n\tfallback() external payable {\n\t\tfund();\n\t}\n\n\t/**\n\t *  @notice This function funds this contract\n\t *  @dev This implements price feeds as our library\n\t */\n\tfunction fund() public payable {\n\t\tif (msg.value.getConversionRate(s_priceFeed) < MIN_USD) {\n\t\t\trevert FundMe__LessThanMinUSD();\n\t\t}\n\t\ts_funders.push(msg.sender);\n\t\ts_addressToAmountFunded[msg.sender] = msg.value;\n\t}\n\n\tfunction withdraw() public onlyOwner {\n\t\tfor (uint256 i = 0; i < s_funders.length; i++) {\n\t\t\ts_addressToAmountFunded[s_funders[i]] = 0;\n\t\t}\n\t\t// This resets the array by declaring it anew with no objects (0).\n\t\ts_funders = new address[](0);\n\n\t\t// Using call which as of Dec-2019 is the preferred method.\n\t\t(bool callSuccess /*bytes memory dataReturned*/, ) = payable(msg.sender)\n\t\t\t.call{value: address(this).balance}(\"\");\n\t\tif (!callSuccess) {\n\t\t\trevert FundMe__WithdrawFailed();\n\t\t}\n\t}\n\n\tfunction cheaperWithdraw() public onlyOwner {\n\t\taddress[] memory funders = s_funders;\n\n\t\tfor (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\n\t\t\taddress funder = funders[funderIndex];\n\t\t\ts_addressToAmountFunded[funder] = 0;\n\t\t}\n\t\ts_funders = new address[](0);\n\t\t(bool callSuccess, ) = i_owner.call{value: address(this).balance}(\"\");\n\t\tif (!callSuccess) {\n\t\t\trevert FundMe__WithdrawFailed();\n\t\t}\n\t}\n\n\tfunction getOwner() public view returns (address) {\n\t\treturn i_owner;\n\t}\n\n\tfunction getFunder(uint256 index) public view returns (address) {\n\t\treturn s_funders[index];\n\t}\n\n\tfunction getAddressToAmountFunded(\n\t\taddress funder\n\t) public view returns (uint256) {\n\t\treturn s_addressToAmountFunded[funder];\n\t}\n\n\tfunction getPriceFeed() public view returns (AggregatorV3Interface) {\n\t\treturn s_priceFeed;\n\t}\n\n\t/**\n\t * @dev Forgot that updating from Ethers 5 to 6 required a small change to\n\t * staging test's fundMe.address to fundMe.target, so I wrote getBalance\n\t * to test if the balance can be returned this way.\n\t */\n\tfunction getBalance() public view returns (uint256) {\n\t\treturn address(this).balance;\n\t}\n}\n"
		},
		"contracts/PriceConverter.sol": {
			"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n// Why is this a library and not abstract?\n// Why not an interface?\nlibrary PriceConverter {\n\t// We could make this public, but then we'd have to deploy it\n\tfunction getPrice(\n\t\tAggregatorV3Interface priceFeedAddress\n\t) internal view returns (uint256) {\n\t\t// https://docs.chain.link/docs/ethereum-addresses/\n\t\tAggregatorV3Interface priceFeed = AggregatorV3Interface(\n\t\t\t// Goerli\n\t\t\tpriceFeedAddress\n\t\t);\n\t\t(, int256 answer, , , ) = priceFeed.latestRoundData();\n\t\t// ETH/USD rate in 18 digit\n\t\treturn uint256(answer * 1e10);\n\t}\n\n\t// 1000000000\n\tfunction getConversionRate(\n\t\tuint256 ethAmount,\n\t\tAggregatorV3Interface priceFeed\n\t) internal view returns (uint256) {\n\t\tuint256 ethPrice = getPrice(priceFeed);\n\t\tuint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n\t\t// the actual ETH/USD conversation rate, after adjusting the extra 0s.\n\t\treturn ethAmountInUsd;\n\t}\n}\n"
		}
	},
	"settings": {
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"outputSelection": {
			"*": {
				"*": [
					"abi",
					"evm.bytecode",
					"evm.deployedBytecode",
					"evm.methodIdentifiers",
					"metadata",
					"devdoc",
					"userdoc",
					"storageLayout",
					"evm.gasEstimates"
				],
				"": ["ast"]
			}
		},
		"metadata": {
			"useLiteralContent": true
		}
	}
}
